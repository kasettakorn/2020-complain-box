{"version":3,"sources":["components/PostIt.js","firebase/index.js","services/firebaseServices.js","components/PostitList.js","App.js","serviceWorker.js","index.js"],"names":["PostIt","href","this","props","uploadName","className","style","border","lineHeight","note","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","database","db","ref","data","push","PostItList","handleSubmit","FirebaseService","state","then","setState","success","catch","e","console","log","modalLoading","setTimeout","modalVisible","handleCancel","handleChange","target","name","value","loading","bind","onDataChange","on","off","items","snapshots","forEach","item","key","val","id","title","visible","confirmLoading","onOk","onCancel","prefix","UserOutlined","onChange","type","size","block","icon","UploadOutlined","onClick","map","index","position","top","left","indicator","LoadingOutlined","fontSize","spin","Header","Layout","Content","App","Footer","Sider","backgroundColor","padding","color","role","aria-label","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4651d7b7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class PostIt extends Component {\n  render() {\n    return (\n      <div>\n        <a href=\"#\">\n          <h2>{this.props.uploadName}</h2>\n          <div className=\"content-tanabata\" style={{border:\"1px dashed black\", lineHeight:\"35px\"}}>\n            <p>{this.props.note}</p>\n          </div>\n          \n        </a>\n      </div>\n    );\n  }\n}\n","import firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/database\";\n\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAcR04zfOkpNnf90aumafMe4JyNdLmmzKM\",\n  authDomain: \"mob-support-3d5a1.firebaseapp.com\",\n  databaseURL: \"https://mob-support-3d5a1.firebaseio.com\",\n  projectId: \"mob-support-3d5a1\",\n  storageBucket: \"mob-support-3d5a1.appspot.com\",\n  messagingSenderId: \"755638116751\",\n  appId: \"1:755638116751:web:70d8f71ef5c5c7148aabfa\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst storage = firebase.storage();\nconst database = firebase.database();\n\n\nexport { storage, database, firebase as default };\n","import firebase from \"../firebase/\";\n\nconst db = firebase.database().ref(\"/postit\");\n\nconst getAll = () => {\n  return db;\n};\n\nconst create = (data) => {\n  return db.push(data);\n};\n\nconst update = (key, data) => {\n  return db.child(key).update(data);\n};\n\nconst remove = (key) => {\n  return db.child(key).remove();\n};\n\nconst removeAll = () => {\n  return db.remove();\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove,\n  removeAll,\n};\n","import {\n  LoadingOutlined,\n  UploadOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\nimport { Button, Input, Spin } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React, { Component } from \"react\";\nimport \"../style/Postit.css\";\nimport PostIt from \"./PostIt\";\nimport FirebaseService from \"../services/firebaseServices\";\n\nexport default class PostItList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      modalLoading: false,\n      modalVisible: false,\n      uploadName: \"\",\n      success: false,\n      note: \"\",\n      data: [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.onDataChange = this.onDataChange.bind(this);\n  }\n\n  handleSubmit = () => {\n    FirebaseService.create({\n      uploadName: this.state.uploadName,\n      note: this.state.note,\n    })\n      .then(() => {\n        this.setState({\n          success: true,\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n\n    this.setState({\n      modalLoading: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        modalVisible: false,\n        modalLoading: false,\n      });\n    }, 3000);\n  };\n\n  handleCancel = () => {\n    this.setState({\n      modalVisible: false,\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  componentDidMount() {\n    FirebaseService.getAll().on(\"value\", this.onDataChange);\n  }\n\n  componentWillUnmount() {\n    FirebaseService.getAll().off(\"value\", this.onDataChange);\n  }\n\n  onDataChange(items) {\n    let snapshots = [];\n\n    items.forEach((item) => {\n      let key = item.key;\n      let data = item.val();\n      snapshots.push({\n        key: key,\n        uploadName: data.uploadName,\n        note: data.note,\n      });\n    });\n\n    this.setState({\n      data: snapshots,\n      success: true,\n    });\n  }\n\n  render() {\n    if (!this.state.success) {\n      return (\n        <Spin\n          style={{\n            position: \"fixed\",\n            top: \"50%\",\n            left: \"50%\",\n          }}\n          indicator={<LoadingOutlined style={{ fontSize: 60 }} spin />}\n        />\n      );\n    }\n\n    return (\n      <div id=\"postit-list\">\n        <Modal\n          title=\"Tanabata message\"\n          visible={this.state.modalVisible}\n          confirmLoading={this.state.modalLoading}\n          onOk={this.handleSubmit}\n          onCancel={this.handleCancel}\n        >\n          <label>ชื่อ</label>\n          <Input\n            prefix={<UserOutlined />}\n            name=\"uploadName\"\n            onChange={this.handleChange}\n          />\n          <label>Note</label>\n          <TextArea name=\"note\" onChange={this.handleChange} />\n        </Modal>\n\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          block\n          style={{ border: \"none\" }}\n          icon={<UploadOutlined />}\n          loading={this.state.loading}\n          onClick={() => this.setState({ modalVisible: true })}\n        >\n          Create Tanabata\n        </Button>\n        <ul className=\"post-it-ul\">\n          {this.state.data.map((data, index) => (\n            <li key={index} className=\"post-it-li\">\n              <PostIt\n                uploadName={data.uploadName}\n                note={data.note}\n                key={index}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Layout, Menu } from \"antd\";\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n// import Cheerup from \"./components/Cheerup\";\nimport PostItList from \"./components/PostitList\";\n// import Home from \"./components/Home\";\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <Layout style={{backgroundColor:\"transparent\"}}>\n     \n            <Header\n              className=\"site-layout-sub-header-background\"\n              style={{ padding: 0, color: \"white\", fontSize: 18 }}\n            >\n              <span role=\"img\" aria-label=\"img\" style={{fontSize:\"30px\"}} >🏮 Tanabata 2021</span>\n            </Header>\n            <Content style={{ margin: \"24px 16px 0\" }}>\n              <div\n\n         \n              >\n                <PostItList />\n              </div>\n            </Content>\n   \n    \n        </Layout>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}